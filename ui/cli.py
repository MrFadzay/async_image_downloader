"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è async image downloader.
"""
import re
from pathlib import Path
from typing import Any, Callable, Coroutine

import questionary

from core.downloader import run_download_session, run_download_session_with_pause
from core.duplicates import (
    handle_duplicates,
    uniquify_all_images,
    uniquify_duplicates,
)
from utils.logger import logger
from utils.validation import validate_download_request
from utils.user_guidance import UserGuidance, show_context_sensitive_help
from utils.error_handling import get_error_handler


def _clean_path_string(path_str: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø—É—Ç–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫.
    
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã, –∫–∞–≤—ã—á–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è
    –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É—Ç–µ–π –∏–∑ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.
    
    Args:
        path_str: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—É—Ç–∏
        
    Returns:
        str: –û—á–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—É—Ç–∏
    """
    # –£–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ '& ' –∏ –∫–æ–Ω–µ—á–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã
    cleaned_path = path_str.strip()
    if cleaned_path.startswith("& '") and \
       cleaned_path.endswith("'"):
        cleaned_path = cleaned_path[3:-1]
    # –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–∞—á–∞–ª—å–Ω—ã–µ/–∫–æ–Ω–µ—á–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    return cleaned_path.strip().strip('"\'')


def _validate_url(url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å URL –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤–∫–ª—é—á–∞—è –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ö–µ–º—ã, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º.
    
    Args:
        url: URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω, False –∏–Ω–∞—á–µ
    """
    return validate_download_request(url)


async def _handle_new_download_session() -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è URL-–∞–¥—Ä–µ—Å–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è,
    –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏.
    """
    urls_str = await questionary.text(
        "–í—Å—Ç–∞–≤—å—Ç–µ URL-–∞–¥—Ä–µ—Å–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º:",
        validate=lambda text: True if len(
            text) > 0 else "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω URL."
    ).ask_async()

    if urls_str is None:
        logger.warning("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    urls = []
    skipped_urls = []
    for url_candidate in re.split(r'[\s;,|]+', urls_str.strip()):
        if not url_candidate:
            continue

        url_candidate = url_candidate.strip()
        if _validate_url(url_candidate):
            urls.append(url_candidate)
        else:
            skipped_urls.append(url_candidate)
            logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL: '{url_candidate}'")

    if not urls:
        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö URL –∏–ª–∏ –≤—Å–µ URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")
        print("
üîç –ü–æ–º–æ—â—å –ø–æ –≤–≤–æ–¥—É URL:")
        print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ URL: https://example.com/image.jpg")
        print("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã: https://, http://")
        print("   ‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ: file://, ftp://, –ª–æ–∫–∞–ª—å–Ω—ã–µ IP")
        return

    total_urls = len(urls)
    logger.info(
        f"–ù–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö URL: {total_urls}"
    )

    if skipped_urls:
        logger.warning(
            "–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö URL: %d\n–ü—Ä–∏–º–µ—Ä—ã: %s",
            len(skipped_urls),
            ", ".join(skipped_urls[:3])
        )
        confirm_continue = await questionary.confirm(
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ URL?",
            default=True
        ).ask_async()
        if not confirm_continue:
            logger.info("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

    def validate_number(text: str, min_val: int, max_val: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —á–∏—Å–ª–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ."""
        if not text.isdigit():
            return False
        val = int(text)
        return min_val <= val <= max_val

    start_index_str = await questionary.text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (1-9999):",
        default="1000",
        validate=lambda text: validate_number(text, 1, 9999)
    ).ask_async()
    if start_index_str is None:
        logger.warning("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    start_index = int(start_index_str)

    retries_str = await questionary.text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (1-10):",
        default="3",
        validate=lambda text: validate_number(text, 1, 10)
    ).ask_async()
    if retries_str is None:
        logger.warning("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    retries = int(retries_str)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    enable_pause_resume = await questionary.confirm(
        "–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è? (–ü–∞—É–∑–∞ –ø–æ Ctrl+C)",
        default=True
    ).ask_async()
    
    if enable_pause_resume is None:
        logger.warning("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    logger.info("\n–°–≤–æ–¥–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:")
    logger.info(f"* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ URL: {total_urls}")
    logger.info(f"* –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {start_index}")
    logger.info(f"* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {retries}")
    logger.info(f"* –ü–∞—É–∑–∞/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {'–î–∞' if enable_pause_resume else '–ù–µ—Ç'}")

    logger.info("\n–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
    
    if enable_pause_resume:
        await run_download_session_with_pause(
            urls=urls,
            start_index=start_index,
            retries=retries,
            enable_pause_resume=True
        )
    else:
        await run_download_session(
            urls=urls,
            start_index=start_index,
            retries=retries
        )


async def _process_directory_action(
    prompt_message: str,
    action_function: Callable[[Path], Coroutine[Any, Any, None]],
) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—É—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.
    """
    print(f"
üìÅ {prompt_message}")
    print("üìù –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:")
    print("   ‚Ä¢ –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–∞–∫ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π, —Ç–∞–∫ –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å")
    print("   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ø—É—Ç–∏ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –∏ –ø—Ä–æ–±–µ–ª–∞–º–∏")
    print("   ‚Ä¢ –ü—Ä–∏–º–µ—Ä: ./images –∏–ª–∏ C:/Users/Name/Pictures")
    
    dir_path_str = await questionary.path(prompt_message).ask_async()

    if dir_path_str:
        dir_path_str = _clean_path_string(dir_path_str)
        try:
            path_obj = Path(dir_path_str)
            if not path_obj.exists():
                print(f"
‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{dir_path_str}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                print("üìù –ü–æ–º–æ—â—å:")
                print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Ç–∏")
                print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞")
                print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å")
                return
                
            if not path_obj.is_dir():
                print(f"
‚ùå –û—à–∏–±–∫–∞: '{dir_path_str}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
                print("üìù –ü–æ–º–æ—â—å: –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –∞ –Ω–µ –∫ —Ñ–∞–π–ª—É")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            try:
                files = list(path_obj.glob("*"))
                image_files = [f for f in files if f.suffix.lower() in ['.jpg', '.jpeg', '.png', '.webp', '.gif']]
                print(f"
üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
                print(f"   üìÅ –ü—É—Ç—å: {path_obj.absolute()}")
                print(f"   üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
                print(f"   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
                
                if len(image_files) == 0:
                    UserGuidance.show_help_for_issue("no_images_found")
                    return
            except PermissionError:
                print(f"
‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
                UserGuidance.show_help_for_issue("permission_denied")
                return
            
            await action_function(path_obj)
        except Exception as e:
            error_handler = get_error_handler()
            error_handler.handle_file_error(e, Path(dir_path_str), "directory_processing")
    else:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


async def _handle_duplicates_menu() -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏."""
    action = await questionary.select(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏:",
        choices=[
            "–ù–∞–π—Ç–∏ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã",
            "–£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã",
            "–ù–∞–∑–∞–¥"
        ]
    ).ask_async()

    if action == "–ù–∞–π—Ç–∏ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã":
        await _process_directory_action(
            "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
            handle_duplicates
        )
    elif action == "–£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã":
        await _process_directory_action(
            "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:",
            uniquify_duplicates
        )


async def run_interactive_mode() -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π,
    –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –¥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–ø—Ü–∏–∏ ¬´–í—ã—Ö–æ–¥¬ª.
    """
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    UserGuidance.show_welcome_message()
    while True:
        command = await questionary.select(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            choices=[
                "–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                "–†–∞–±–æ—Ç–∞ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏",
                "–£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è",
                "–í—ã—Ö–æ–¥"
            ]
        ).ask_async()

        if command == "–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
            UserGuidance.show_operation_tips("download")
            await _handle_new_download_session()
        elif command == "–†–∞–±–æ—Ç–∞ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏":
            UserGuidance.show_operation_tips("find_duplicates")
            await _handle_duplicates_menu()
        elif command == "–£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è":
            UserGuidance.show_operation_tips("uniquify_all")
            UserGuidance.show_safety_warning("uniquify_all")
            await _process_directory_action(
                "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
                uniquify_all_images
            )
        elif command == "–í—ã—Ö–æ–¥" or command is None:
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            break
