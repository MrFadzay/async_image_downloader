"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
"""
import asyncio
import threading
from typing import Optional, AsyncGenerator, Dict, Any, TYPE_CHECKING
from contextlib import asynccontextmanager

from tqdm.asyncio import tqdm
from tqdm import tqdm as sync_tqdm

from utils.logger import logger

if TYPE_CHECKING:
    from utils.session_manager import DownloadSessionManager


class ProgressTracker:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
    
    def __init__(self) -> None:
        self._progress_bars: Dict[str, tqdm] = {}
        self._active_tasks: Dict[str, bool] = {}
    
    @asynccontextmanager
    async def track_download_progress(
        self, 
        total_urls: int, 
        description: str = "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
    ) -> AsyncGenerator[tqdm, None]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        
        Args:
            total_urls: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Yields:
            tqdm: –û–±—ä–µ–∫—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        progress_bar = tqdm(
            total=total_urls,
            desc=description,
            unit="—Ñ–∞–π–ª",
            unit_scale=False,
            colour="green",
            bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]"
        )
        
        try:
            yield progress_bar
        finally:
            progress_bar.close()
    
    @asynccontextmanager 
    async def track_duplicate_progress(
        self, 
        total_files: int,
        description: str = "–ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"
    ) -> AsyncGenerator[tqdm, None]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
        
        Args:
            total_files: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Yields:
            tqdm: –û–±—ä–µ–∫—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        progress_bar = tqdm(
            total=total_files,
            desc=description,
            unit="—Ñ–∞–π–ª",
            unit_scale=False,
            colour="blue",
            bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]"
        )
        
        try:
            yield progress_bar
        finally:
            progress_bar.close()
    
    @asynccontextmanager
    async def track_uniquify_progress(
        self, 
        total_files: int,
        description: str = "–£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
    ) -> AsyncGenerator[tqdm, None]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        
        Args:
            total_files: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Yields:
            tqdm: –û–±—ä–µ–∫—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        progress_bar = tqdm(
            total=total_files,
            desc=description,
            unit="—Ñ–∞–π–ª", 
            unit_scale=False,
            colour="yellow",
            bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]"
        )
        
        try:
            yield progress_bar
        finally:
            progress_bar.close()
    
    def create_file_processing_bar(
        self, 
        total_files: int, 
        description: str = "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"
    ) -> sync_tqdm:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤.
        
        Args:
            total_files: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            
        Returns:
            sync_tqdm: –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        """
        return sync_tqdm(
            total=total_files,
            desc=description,
            unit="—Ñ–∞–π–ª",
            unit_scale=False,
            colour="cyan"
        )
    
    def create_pausable_progress_bar(
        self, 
        total: int, 
        description: str = "–û–±—Ä–∞–±–æ—Ç–∫–∞",
        session_manager: Optional["DownloadSessionManager"] = None
    ) -> "PausableProgressBar":
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä.
        
        Args:
            total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            session_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—É–∑–æ–π
            
        Returns:
            PausableProgressBar: –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—É–∑—ã
        """
        return PausableProgressBar(total, description, session_manager)


class PausableProgressBar:
    """–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    
    def __init__(
        self, 
        total: int, 
        description: str = "–û–±—Ä–∞–±–æ—Ç–∫–∞",
        session_manager: Optional["DownloadSessionManager"] = None
    ):
        self.total = total
        self.description = description
        self.session_manager = session_manager
        self.progress_bar: Optional[tqdm] = None
        self.completed = 0
        self.is_paused = False
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if self.session_manager:
            self.session_manager.add_pause_callback(self._on_pause)
            self.session_manager.add_resume_callback(self._on_resume)
    
    def __enter__(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥."""
        self.progress_bar = tqdm(
            total=self.total,
            desc=self.description,
            unit="—Ñ–∞–π–ª",
            unit_scale=False,
            colour="green",
            bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]"
        )
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥."""
        if self.progress_bar:
            self.progress_bar.close()
    
    def update(self, n: int = 1) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å."""
        if self.progress_bar and not self.is_paused:
            self.progress_bar.update(n)
            self.completed += n
    
    def set_description(self, desc: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞."""
        if self.progress_bar:
            self.progress_bar.set_description(desc)
    
    def _on_pause(self) -> None:
        """–ö–æ–ª–ª–±—ç–∫ –ø—Ä–∏ –ø–∞—É–∑–µ."""
        self.is_paused = True
        if self.progress_bar:
            self.progress_bar.set_description(f"‚è∏Ô∏è  –ü–ê–£–ó–ê - {self.description}")
    
    def _on_resume(self) -> None:
        """–ö–æ–ª–ª–±—ç–∫ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."""
        self.is_paused = False
        if self.progress_bar:
            self.progress_bar.set_description(self.description)
    
    async def wait_if_paused(self) -> bool:
        """–ñ–¥–µ—Ç –µ—Å–ª–∏ –Ω–∞ –ø–∞—É–∑–µ."""
        if self.session_manager:
            return await self.session_manager.wait_if_paused()
        return True


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
progress_tracker = ProgressTracker()


def get_progress_tracker() -> ProgressTracker:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    return progress_tracker


async def show_operation_summary(
    operation_name: str,
    total_processed: int,
    successful: int,
    failed: int,
    elapsed_time: float
) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
    
    Args:
        operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        total_processed: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        successful: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
        failed: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö
        elapsed_time: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    success_rate = (successful / total_processed * 100) if total_processed > 0 else 0
    
    print(f"\n{'='*60}")
    print(f"üìä –°–í–û–î–ö–ê: {operation_name}")
    print(f"{'='*60}")
    print(f"üéØ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful} ({success_rate:.1f}%)")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫")
    print(f"{'='*60}\n")
    
    logger.info(
        f"{operation_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {successful}/{total_processed} —É—Å–ø–µ—à–Ω–æ "
        f"–∑–∞ {elapsed_time:.2f} —Å–µ–∫"
    )


async def show_download_stats(
    downloaded: int,
    skipped: int, 
    errors: int,
    total_size_mb: float,
    elapsed_time: float
) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    
    Args:
        downloaded: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        skipped: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        errors: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        total_size_mb: –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ú–ë
        elapsed_time: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    total_files = downloaded + skipped + errors
    download_speed = total_size_mb / elapsed_time if elapsed_time > 0 else 0
    
    print(f"\n{'='*60}")
    print(f"üì• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ö–ê–ß–ò–í–ê–ù–ò–Ø")
    print(f"{'='*60}")
    print(f"üìÅ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {downloaded}")
    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {errors}")
    print(f"üìä –û–±—â–∏–π –æ–±—ä–µ–º: {total_size_mb:.2f} –ú–ë")
    print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {download_speed:.2f} –ú–ë/—Å–µ–∫")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {elapsed_time:.2f} —Å–µ–∫")
    print(f"{'='*60}\n")