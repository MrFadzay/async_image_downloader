"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
"""
import asyncio
from pathlib import Path
from typing import List, Dict, Any, Optional
import questionary

from utils.logger import logger


def _should_skip_confirmation() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    try:
        from main import get_skip_confirmations
        return get_skip_confirmations()
    except (ImportError, AttributeError):
        return False


class ConfirmationDialog:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
    
    @staticmethod
    async def confirm_rename_duplicates(
        duplicates_info: List[tuple], 
        directory: Path
    ) -> bool:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
        
        Args:
            duplicates_info: –°–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö
            directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é
        """
        if not duplicates_info:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        if _should_skip_confirmation():
            logger.info("üöÄ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (--yes)")
            return True
            
        count = len(duplicates_info)
        
        print(f"\n{'='*60}")
        print(f"üîç –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–Ø")
        print(f"{'='*60}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
        print(f"üîÑ –§–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {count}")
        print(f"{'='*60}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        preview_count = min(5, count)
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è (–ø–æ–∫–∞–∑–∞–Ω–æ {preview_count} –∏–∑ {count}):")
        
        for i, (file_path, _, original_path) in enumerate(duplicates_info[:preview_count]):
            file_stem = file_path.stem
            suffix = file_path.suffix
            new_name = f"{file_stem}_duplicate_1{suffix}"
            
            print(f"  {i+1}. {file_path.name}")
            print(f"     ‚ûú {new_name}")
            print(f"     (–¥—É–±–ª–∏–∫–∞—Ç: {original_path.name})")
            print()
        
        if count > preview_count:
            print(f"  ... –∏ –µ—â–µ {count - preview_count} —Ñ–∞–π–ª–æ–≤")
        
        print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç –∏–º–µ–Ω–∞ {count} —Ñ–∞–π–ª–æ–≤!")
        print("   –§–∞–π–ª—ã –ø–æ–ª—É—á–∞—Ç —Å—É—Ñ—Ñ–∏–∫—Å '_duplicate_N' –≥–¥–µ N - –Ω–æ–º–µ—Ä –¥—É–±–ª–∏–∫–∞—Ç–∞")
        
        return await questionary.confirm(
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤?",
            default=False
        ).ask_async()
    
    @staticmethod
    async def confirm_modify_duplicates(
        duplicates_info: List[tuple], 
        directory: Path
    ) -> bool:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
        
        Args:
            duplicates_info: –°–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö
            directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é
        """
        if not duplicates_info:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        if _should_skip_confirmation():
            logger.info("üöÄ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (--yes)")
            return True
            
        count = len(duplicates_info)
        
        print(f"\n{'='*60}")
        print(f"üé® –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ú–û–î–ò–§–ò–ö–ê–¶–ò–ò")
        print(f"{'='*60}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
        print(f"üñºÔ∏è  –§–∞–π–ª–æ–≤ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {count}")
        print(f"{'='*60}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
        preview_count = min(10, count)
        print(f"\nüìã –§–∞–π–ª—ã –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø–æ–∫–∞–∑–∞–Ω–æ {preview_count} –∏–∑ {count}):")
        
        for i, (file_path, _, original_path) in enumerate(duplicates_info[:preview_count]):
            print(f"  {i+1}. {file_path.name} (–¥—É–±–ª–∏–∫–∞—Ç: {original_path.name})")
        
        if count > preview_count:
            print(f"  ... –∏ –µ—â–µ {count - preview_count} —Ñ–∞–π–ª–æ–≤")
        
        print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–ø–µ—Ä–∞—Ü–∏—è –ù–ï–û–ë–†–ê–¢–ò–ú–û –∏–∑–º–µ–Ω–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ {count} —Ñ–∞–π–ª–æ–≤!")
        print("   –ë—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print("   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞")
        print("   ‚Ä¢ –°–ª—É—á–∞–π–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∫—Ä–∞–µ–≤")
        print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞")
        print("   ‚Ä¢ –î—Ä—É–≥–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        print(f"\nüíæ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π!")
        
        return await questionary.confirm(
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ–æ–±—Ä–∞—Ç–∏–º—É—é –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤?",
            default=False
        ).ask_async()
    
    @staticmethod
    async def confirm_modify_all_images(
        image_files: List[Path], 
        directory: Path
    ) -> bool:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        
        Args:
            image_files: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é
        """
        if not image_files:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        if _should_skip_confirmation():
            logger.info("üöÄ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (--yes)")
            return True
            
        count = len(image_files)
        
        print(f"\n{'='*60}")
        print(f"üé® –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –£–ù–ò–ö–ê–õ–ò–ó–ê–¶–ò–ò –í–°–ï–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
        print(f"{'='*60}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
        print(f"üñºÔ∏è  –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {count}")
        print(f"{'='*60}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
        preview_count = min(15, count)
        print(f"\nüìã –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ–∫–∞–∑–∞–Ω–æ {preview_count} –∏–∑ {count}):")
        
        for i, file_path in enumerate(image_files[:preview_count]):
            print(f"  {i+1}. {file_path.name}")
        
        if count > preview_count:
            print(f"  ... –∏ –µ—â–µ {count - preview_count} —Ñ–∞–π–ª–æ–≤")
        
        print(f"\n‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:")
        print(f"   –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –ù–ï–û–ë–†–ê–¢–ò–ú–û –∏–∑–º–µ–Ω–∏—Ç –í–°–ï {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
        print("   –ö–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–æ–ª—É—á–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏:")
        print("   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞, –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏")
        print("   ‚Ä¢ –°–ª—É—á–∞–π–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∫—Ä–∞–µ–≤ (1-3 –ø–∏–∫—Å–µ–ª—è)")
        print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —à—É–º–∞")
        print("   ‚Ä¢ –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å–¥–≤–∏–≥–∏")
        
        print(f"\nüõë –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!")
        print("   –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—ã –±—É–¥–µ—Ç –ù–ï–í–û–ó–ú–û–ñ–ù–û!")
        
        # –î–≤–æ–π–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Ç–∞–∫–æ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        first_confirm = await questionary.confirm(
            f"–í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ {count} —Ñ–∞–π–ª–æ–≤ –ù–ï–û–ë–†–ê–¢–ò–ú–û?",
            default=False
        ).ask_async()
        
        if not first_confirm:
            return False
        
        return await questionary.confirm(
            "–ü–û–°–õ–ï–î–ù–ï–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π?",
            default=False
        ).ask_async()
    
    @staticmethod
    async def show_operation_preview(
        operation_name: str,
        files_affected: int,
        directory: Path,
        details: Optional[Dict[str, Any]] = None
    ) -> bool:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            files_affected: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
            directory: –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é
        """
        print(f"\n{'='*60}")
        print(f"üîç –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–†: {operation_name.upper()}")
        print(f"{'='*60}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
        print(f"üìÑ –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: {files_affected}")
        
        if details:
            for key, value in details.items():
                print(f"{key}: {value}")
        
        print(f"{'='*60}")
        
        return await questionary.confirm(
            f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é '{operation_name}'?",
            default=True
        ).ask_async()


async def confirm_destructive_operation(
    operation_type: str,
    **kwargs
) -> bool:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    
    Args:
        operation_type: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ ('rename_duplicates', 'modify_duplicates', 'modify_all')
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    """
    try:
        if operation_type == "rename_duplicates":
            return await ConfirmationDialog.confirm_rename_duplicates(
                kwargs.get("duplicates_info", []),
                kwargs.get("directory", Path())
            )
        elif operation_type == "modify_duplicates":
            return await ConfirmationDialog.confirm_modify_duplicates(
                kwargs.get("duplicates_info", []),
                kwargs.get("directory", Path())
            )
        elif operation_type == "modify_all":
            return await ConfirmationDialog.confirm_modify_all_images(
                kwargs.get("image_files", []),
                kwargs.get("directory", Path())
            )
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_type}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        return False